class Solution {
public:
   void gameOfLife(vector<vector<int>>& board) {
        int m = board.size();
        int n = board[0].size();
        
        vector<pair<int, int>> neighbors = {
            {-1, -1}, {-1, 0}, {-1, 1},
            {0, -1}, {0, 1},
            {1, -1}, {1, 0}, {1, 1}
        };

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int live_neighbors = 0;

                for (const auto& p : neighbors) {
                    int ni = i + p.first;
                    int nj = j + p.second;

                    if (ni >= 0 && ni < m && nj >= 0 && nj < n) {
                        
                        if (board[ni][nj] == 1 || board[ni][nj] == 2) {
                            live_neighbors++;
                        }
                    }
                }

                int current_state = board[i][j];

                if (current_state == 1) { 
                    if (live_neighbors < 2 || live_neighbors > 3) {
                        board[i][j] = 2; 
                    }
                } else { 
                    if (live_neighbors == 3) {
                        board[i][j] = 3; 
                    }
                }
            }
        }

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == 2) {
                    board[i][j] = 0; 
                } else if (board[i][j] == 3) {
                    board[i][j] = 1; 
                }
            }
        }
    }
};
