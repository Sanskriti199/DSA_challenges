class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        if (words.empty() || s.empty()) {
            return {};
        }

        int num_words = words.size();
        int word_len = words[0].length();
        int total_len = num_words * word_len;
        int s_len = s.length();

        unordered_map<string, int> required_freq;
        for (const string& word : words) {
            required_freq[word]++;
        }

        vector<int> result;

        for (int offset = 0; offset < word_len; ++offset) {
            unordered_map<string, int> words_found;
            int words_count = 0;
            
            for (int i = offset; i <= s_len - word_len; i += word_len) {
                string current_word = s.substr(i, word_len);

                if (required_freq.count(current_word)) {
                    words_found[current_word]++;
                    words_count++;

                    while (words_found[current_word] > required_freq[current_word]) {
                        int left_word_start = i - (words_count - 1) * word_len;
                        string left_word = s.substr(left_word_start, word_len);

                        words_found[left_word]--;
                        words_count--;
                    }
                    
                    if (words_count == num_words) {
                        result.push_back(i - total_len + word_len);

                        int leftmost_word_start = i - total_len + word_len;
                        string leftmost_word = s.substr(leftmost_word_start, word_len);
                        
                        words_found[leftmost_word]--;
                        words_count--;
                    }
                } else {
                    words_found.clear();
                    words_count = 0;
                }
            }
        }

        return result;
    }
};
